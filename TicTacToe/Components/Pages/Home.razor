@page "/"

<div class="container">
    <h1 class="text-center"> <b>Tic Tac Toe</b></h1>
    <div class="row justify-content-center">
        <div class="col-4">
            <div class="row">
                @for (int i = 0; i < 3; i++)
                {
                    <div class="col-12 d-flex justify-content-center">
                        @for (int j = 0; j < 3; j++)
                        {
                            <button class="btn btn-outline-primary m-1" style="width: 100px; height: 100px;" @onclick="@(e => MakeMove(i, j))">
                                @board[i, j]
                            </button>
                        }
                    </div>
                }
            </div>
            <div class="text-center mt-3">
                <button class="btn btn-danger" @onclick="ResetGame">Reset Game</button>
            </div>
            @if (!string.IsNullOrEmpty(winner))
            {
                <div class="alert alert-success text-center mt-3">
                    @winner
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string[,] board = new string[3, 3];
    private string currentPlayer = "X";
    private string winner;

    private void MakeMove(int row, int col)
    {
        if (string.IsNullOrEmpty(board[row, col]) && string.IsNullOrEmpty(winner))
        {
            board[row, col] = currentPlayer;
            if (CheckForWinner())
            {
                winner = $"{currentPlayer} wins!";
            }
            else if (IsBoardFull())
            {
                winner = "It's a draw!";
            }
            else
            {
                currentPlayer = currentPlayer == "X" ? "O" : "X";
            }
        }
    }

    private bool CheckForWinner()
    {
        // Check rows, columns, and diagonals
        for (int i = 0; i < 3; i++)
        {
            if (!string.IsNullOrEmpty(board[i, 0]) && board[i, 0] == board[i, 1] && board[i, 1] == board[i, 2])
                return true;
            if (!string.IsNullOrEmpty(board[0, i]) && board[0, i] == board[1, i] && board[1, i] == board[2, i])
                return true;
        }
        if (!string.IsNullOrEmpty(board[0, 0]) && board[0, 0] == board[1, 1] && board[1, 1] == board[2, 2])
            return true;
        if (!string.IsNullOrEmpty(board[0, 2]) && board[0, 2] == board[1, 1] && board[1, 1] == board[2, 0])
            return true;

        return false;
    }

    private bool IsBoardFull()
    {
        foreach (var cell in board)
        {
            if (string.IsNullOrEmpty(cell))
                return false;
        }
        return true;
    }

    private void ResetGame()
    {
        board = new string[3, 3];
        currentPlayer = "X";
        winner = null;
    }
}
